Problem:
    When your software is updated it will need more parameters for your constructor.
    And when instantiating a new object it becomes quite confusing with so many arguments passing in!
    Makes your code less readable, complicated to maintain, open to mistakes and just butt naked ugly!

Could we solve it with getters?
    Yes and don't...
    Imagine a dev forgets to call a specific setter method, we would end up with a half baked object
    and the compiler would just compile it anyways... this is an Incorrect object state.

 Proposed Solution:

 Creational design pattern

 The builder pattern will let us write understandable and readable code to set up complex objects.
 The builder will contain all of the fields on the class itself.

 We configure all the fields we want on the builder and we will use it to create objects.
 At the same time we make the public constructor from the class private, so that objects can only be created
 via the builder and accessing the setter now called fluent interface to safely set the properties.


